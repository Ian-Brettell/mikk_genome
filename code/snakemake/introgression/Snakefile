#####################
# Bash script
#####################

# cd /hps/research1/birney/users/ian/mikk_paper/mikk_genome
# conda activate snakemake
# module load singularity
# snmk_proj="introgression"
# snakemake \
#   --jobs 5000 \
#   --latency-wait 100 \
#   --cluster-config code/snakemake/$snmk_proj/config/cluster.json \
#   --cluster 'bsub -g /snakemake_bgenie -J {cluster.name} -n {cluster.n} -M {cluster.memory} -o {cluster.output} -e {cluster.error}' \
#   --keep-going \
#   --rerun-incomplete \
#   --use-conda \
#   --use-singularity \
#   -s code/snakemake/$snmk_proj/Snakefile \
#   -p

#####################
# Libraries
#####################

import os.path
import glob

#####################
# Variables
#####################

# Load config file and provide content as config object

configfile: "code/snakemake/introgression/config/config.yaml"

## Get samples

### Get list of files
files = glob.glob(os.path.join(config["target_dir"], "segmented/*/*.data.txt"))

### Remove files generating errors at the `add_hdrr_coords` stage
errors = ['../introgression/release-102/segmented/1_2/1_16795958_16835713_1.data.txt',
          '../introgression/release-102/segmented/20_1/20_6365114_6370294_-1.data.txt',
          '../introgression/release-102/segmented/17_1/17_2139440_2153945_-1.data.txt',
          '../introgression/release-102/segmented/24_2/24_16480574_16483416_-1.data.txt',
          '../introgression/release-102/segmented/11_2/11_21065274_21099126_-1.data.txt']

for error in errors:
    while error in files:
        files.remove(error)

### get chr and sub_chr
CHRS = []
SUBCHRS = []
SEGMENTS = []
STRANDS = []
for file in files:
    CHRS.append(file.split('/')[4].split('_')[0])
    SUBCHRS.append(file.split('/')[4].split('_')[1])
    target_segment = file.split('/')[5].split('_')[0:3]
    SEGMENTS.append("_".join(target_segment))
    STRANDS.append(file.split('/')[5].split('_')[3].split('.')[0])

#####################
# Rules
#####################

rule all:
    input:
        expand(os.path.join(config["target_dir"], "cleaned/{chr}_{subchr}/{segment}_{strand}.txt"),
                zip,
                chr = CHRS,
                subchr = SUBCHRS,
                segment = SEGMENTS,
                strand = STRANDS),
        expand(os.path.join(config["target_dir"], "consolidated/{chr}_{subchr}.txt"),
                zip,
                chr = CHRS,
                subchr = SUBCHRS),
        os.path.join(config["vcf_dir"], "ill_no-sibs.vcf"),
        os.path.join(config["vcf_dir"], "ill_no-sibs.vcf.gz"),
        os.path.join(config["vcf_dir"], "ill_no-sibs.vcf.gz.tbi"),
        os.path.join(config["vcf_dir"], "ill_no-sibs_no-missing.vcf.gz")

rule add_hdrr_coords:
    input:
        os.path.join(config["target_dir"], "segmented/{chr}_{subchr}/{segment}_{strand}.data.txt")
    output:
        os.path.join(config["target_dir"], "cleaned/{chr}_{subchr}/{segment}_{strand}.txt")
    params:
        command = lambda wildcards: "Rscript --no-save --no-restore --no-environ --no-site-file " + config['add_coord_script_forward'] + " $input $output" if wildcards.strand == "1" else "tmp_file=../tmp/" + wildcards.segment + "_" + wildcards.strand + ".data.txt ; tac $input > $tmp_file ; Rscript --no-save --no-restore --no-environ --no-site-file " + config['add_coord_script_reverse'] + " $tmp_file $input $output"
    singularity:
        config["sing_cont_r"]
    shell:
        "input={input}; output={output}; {params.command}"

rule consolidate_subchrs:
    input:
        os.path.join(config["target_dir"], "cleaned/{chr}_{subchr}")
    output:
        os.path.join(config["target_dir"], "consolidated/{chr}_{subchr}.txt")
    singularity:
        config["sing_cont_r"]        
    shell:
        "Rscript --no-save --no-restore --no-environ --no-site-file {config[consol_subchr_script]} {input} {output}"

rule create_no_sibs_vcf:
    input:
        config["mikk_ill_vcf"]
    output:
        os.path.join(config["vcf_dir"], "ill_no-sibs.vcf")
    singularity:
        config["bcftools"]
    shell:
        """
        bcftools view --samples-file {config[no_sibs_cramid]} --output-type u {input} |\
            bcftools reheader \
                --samples {config[cramid_2_lineid_key]} \
                --output {output}
        """

rule compress_no_sibs_vcf:
    input:
        os.path.join(config["vcf_dir"], "ill_no-sibs.vcf")
    output:
        os.path.join(config["vcf_dir"], "ill_no-sibs.vcf.gz")
    singularity:
        config["bcftools"]
    shell:
        """
        bcftools view \
            --output-type z \
            --output-file {output} \
            {input}
        """

rule index_no_sibs_vcf:
    input:
        os.path.join(config["vcf_dir"], "ill_no-sibs.vcf.gz")
    output:
        os.path.join(config["vcf_dir"], "ill_no-sibs.vcf.gz.tbi")
    singularity:
        config["bcftools"]
    shell:
        """
        bcftools index --tbi {input}
        """    

rule remove_missing_no_sibs_vcf:
    input:
        os.path.join(config["vcf_dir"], "ill_no-sibs.vcf.gz")
    output:
        os.path.join(config["vcf_dir"], "ill_no-sibs_no-missing.vcf.gz")
    singularity:
        config["bcftools"]
    shell:
        """
        bcftools view \
            --genotype ^miss \
            --output-type z \
            --output-file {output} \
            {input}
        """
        


